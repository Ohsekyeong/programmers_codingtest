[8번 문제] 평균구하기

<문제 설명>
: 정수를 담고 있는 배열 arr의 평균값을 return하는 함수, solution을 완성해보세요.


<제한조건> 
:arr은 길이 1 이상, 100 이하인 배열입니다.
:arr의 원소는 -10,000 이상 10,000 이하인 정수입니다.


<문제분석>
: 모두 더해서 배열 길이만큼 나누기
-> sum / arr.length 

: 평균값 구하는 함수 알아보기
: Array.reduce()_배열의 각 요소를 순회하며 callback함수의 실행 값을 누적하여 하나의 결과값을 반환
+ reduceRight()_배열의 역순을 원할 때


√ 여기서 callback 함수란?
: 다른 함수의 매개변수로 함수를 전달하고, 어떠한 이벤트가 발생한 후 매개변수로 전달한 함수가 다시 호출되는 것
: 어떤 일을 다른 객체에게 시키고, 그 일이 끝나는 것 을 기다리지 않고 끝나고 부를 때까지 다른 일을 하는 것
   ∴ non-block 이며, 비동기 방식의 함수를 사용 


<문제풀이_1>
function solution(arr) {
    var answer = 0;
    let sum = 0;
    
    for (let i=0; i<arr.length; i++) {
        sum += arr[i] // 배열의 요소들을 하나씩 더함
    }
    return answer = sum/arr.length; // 더한 값과 배열의 길이(=요소 갯수)를 나눔
}


<문제풀이_2>
function solution(arr) {
  return arr.reduce((sum, current) => sum + current) / arr.length;
}


[문법]
- Array.reduce()
: arr.reduce(callback[, initialValue])


1. callback  function
: 각 배열 요소에 대해 실행할 함수, 다음 4가지의 인수를 가짐 

- accumulator : 이전 함수 호출의 결과 ( callback 함수의 반환값 누적)
- currentValue : 배열의 현재 요소
- index (Optional) : 배열의 현재 요소의 인덱스
- array (Optional) : 호출한 배열
- 콜백 함수의 반환 값은  accumulator에 할당되고 순회중 계속 누적되어 최종적으로 하나의 값을 반환


2. initialValue
: 최초 callback함수 실행 시 accumulator 인수에 제공되는 값
: 초기값을 제공하지 않을 경우 배열의 첫 번째 요소를 사용하고, 빈 배열에서 초기값 없이 reduce() 호출할 경우 에러 발생


[사용방법]
_reduce()에는 누산기가 포함되어 있기 때문에, 배열의 각 요소에 대해 함수를 실행하고 누적된 값을 출력할 때 용이  

let arr = [1, 2, 3, 4, 5];
let result = arr.reduce((acc, cur) => acc + cur, 0);
alert(result); //15

위의 예제에서 initialValue 값을 0으로 두었기 때문에 acc의 초기값은 0이 되고, 배열의 첫 번째 요소부터 cur에 자신의 값인 acc을 더한다.
 → reduce()를 실행하고 난 뒤, 최종적으로 반환되는 값은 0 + 1 + 2 + 3 + 4 + 5 인 15이다.

만약, initialValue 값을 10으로 둔다면 acc의 초기값은 10이 되고, 배열의 첫 번째 요소부터 acc에 자신의 값인 cur을 더해가므로 최종적으로 반환되는 값은 10 + 1 + 2 + 3 + 4 + 5 인 25가 된다.
